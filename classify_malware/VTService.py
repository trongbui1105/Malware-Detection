import requests
import time


class VTService:

    def get_family_type_0(self, lookup, type):
        for item in lookup:
            if item in type:
                return True
        return False


    def is_defined_type(self, type):

        if type is "Worms":
            return True
        if type is "Adware":
            return True
        if type is "Virus":
            return True
        if type is "Riskware":
            return True
        if type is "Spyware":
            return True
        if type is "Keylogger":
            return True
        if type is "Ransomware":
            return True
        if type is "Spam":
            return True
        if type is "Backdoor":
            return True
        if type is "Dropper":
            return True
        if type is "Downloader":
            return True
        if type is "Crypt":
            return True
        if type is "Agent":
            return True
        if type is "Rootkit":
            return True
        if type is "Trojan":
            return True
        if type is "Undefined":
            return True

        return False


    def get_family_type(self, type):

        if type == "_":
            return None

        tmp_str = str(type).lower().replace(" ", "")

        if self.get_family_type_0(['worm', '[wrm]'], tmp_str) is True:
            return "Worms"

        if self.get_family_type_0(['adware'], tmp_str) is True:
            return "Adware"

        if self.get_family_type_0(['virus', 'expiro'], tmp_str) is True:
            return "Virus"

        if self.get_family_type_0(['riskware'], tmp_str) is True:
            return "Riskware"

        if self.get_family_type_0(['spyware', 'spy'], tmp_str) is True:
            return "Spyware"

        if self.get_family_type_0(['keylogger'], tmp_str) is True:
            return "Keylogger"

        if self.get_family_type_0(['ransom', 'ansom'], tmp_str) is True:
            return "Ransomware"

        if self.get_family_type_0(['spam'], tmp_str) is True:
            return "Spam"

        if self.get_family_type_0(['backdoor'], tmp_str) is True:
            return "Backdoor"

        if self.get_family_type_0(['dropper'], tmp_str) is True:
            return "Dropper"

        if self.get_family_type_0(['downloader'], tmp_str) is True:
            return "Downloader"

        if self.get_family_type_0(['crypt'], tmp_str) is True:
            return "Crypt"

        if self.get_family_type_0(['agent'], tmp_str) is True:
            return "Agent"

        if self.get_family_type_0(["trjoan",'trj/','trojan', 'troj', '[trj]'], tmp_str) is True:
            return "Trojan"

        if self.get_family_type_0(["rootkit"], tmp_str) is True:
            return "Rootkit"

        if self.get_family_type_0(['unsafe', 'unclassified', "unknown"], tmp_str) is True:
            return "Undefined"

        return type

    def rescan_virus(self, resource, api_key):
        params = {'apikey': api_key, 'input': resource}

        response = requests.post('https://www.virustotal.com/vtapi/v2/file/rescan',
                                 params=params)
        json_response = response.json()
        print(json_response)
        return json_response

    def report_virus(self, resource, api_key):

        params = {'apikey': api_key, 'resource': resource}
        headers = {
            "Accept-Encoding": "gzip, deflate",
            "User-Agent": "gzip,  My Python requests library example client or username"
        }
        response = requests.get('https://www.virustotal.com/vtapi/v2/file/report',
                                params=params, headers=headers)
        json_response = response.json()
        # print(json_response)
        return json_response


    def ask_to_virus_total_service(self, resource, api_key):
        try:
            return self.report_virus(resource, api_key)
        except Exception as e:
            print("ask_to_virus_total_service..." + str(e))
            time.sleep(3)
            return self.ask_to_virus_total_service(resource, api_key)

    def fetch_engine_values(self, resource, api_key):
        # result_str = resource + ":"
        lst_result = []
        response = self.ask_to_virus_total_service(resource, api_key)
        scans = response.get("scans")
        lst_malware = ["Adware", "Agent", "Backdoor", "Crypt", "Downloader", "Dropper", "Keylogger", "Riskware", "Ransomware", "Rootkit", "Spyware", "Spam", "Trojan", "Virus", "Worms"]

        for engine in scans:
            engine_info = scans.get(engine)
            if engine_info.get("detected") is True:
                tmp_str = str(engine_info.get("result"))
                tmp_str = self.get_family_type(tmp_str)
                if tmp_str in lst_malware and tmp_str not in lst_result:
                    lst_result.append(str(tmp_str))
        if lst_result == []:
            lst_result.append("Undefined")
        return lst_result
